
Mux7Seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000005bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000548  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000067  00800100  00800100  000005bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e06  00000000  00000000  000006cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f6  00000000  00000000  000014d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000900  00000000  00000000  00001ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000218  00000000  00000000  000027c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004da  00000000  00000000  000029e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000083f  00000000  00000000  00002eba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000036f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1c c0       	rjmp	.+56     	; 0x56 <__vector_14>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	1b c2       	rjmp	.+1078   	; 0x45c <__vector_18>
  26:	d1 c1       	rjmp	.+930    	; 0x3ca <__vector_19>
  28:	c6 c1       	rjmp	.+908    	; 0x3b6 <__vector_20>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a7 36       	cpi	r26, 0x67	; 103
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	dd d0       	rcall	.+442    	; 0x20c <main>
  52:	78 c2       	rjmp	.+1264   	; 0x544 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <__vector_14>:
#else
#define BCD_MASK(bcd)   ( g_xlate[bcd] )
#endif
                        
ISR(TIMER0_COMPA_vect)
{
  56:	1f 92       	push	r1
  58:	0f 92       	push	r0
  5a:	0f b6       	in	r0, 0x3f	; 63
  5c:	0f 92       	push	r0
  5e:	11 24       	eor	r1, r1
  60:	2f 93       	push	r18
  62:	4f 93       	push	r20
  64:	5f 93       	push	r21
  66:	6f 93       	push	r22
  68:	7f 93       	push	r23
  6a:	8f 93       	push	r24
  6c:	9f 93       	push	r25
  6e:	af 93       	push	r26
  70:	bf 93       	push	r27
    static uint8_t state = 0;
	static uint16_t blink = 0;
	
	/* Handle blanked state logic */
	
	if (g_segdata.flags & F_BLANK)
  72:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <g_segdata>
  76:	88 23       	and	r24, r24
  78:	34 f4       	brge	.+12     	; 0x86 <__vector_14+0x30>
	{
        /* Blank hour, plus is preserved */
        PORTD |= _BV(PD_HOUR);
  7a:	5e 9a       	sbi	0x0b, 6	; 11
		/* Turn off all segments */
        MUX_OFF(PD_TEN_MIN);
  7c:	5c 9a       	sbi	0x0b, 4	; 11
        MUX_OFF(PD_UNIT_MIN);
  7e:	5d 9a       	sbi	0x0b, 5	; 11
		MUX_OFF(PD_TEN_SEC);        
  80:	5a 9a       	sbi	0x0b, 2	; 11
		MUX_OFF(PD_UNIT_SEC);
  82:	5b 9a       	sbi	0x0b, 3	; 11
		goto exit;
  84:	96 c0       	rjmp	.+300    	; 0x1b2 <__vector_14+0x15c>
	}

	/* Handle blink state logic */
	
	if (g_segdata.flags & F_BLINK)
  86:	81 ff       	sbrs	r24, 1
  88:	19 c0       	rjmp	.+50     	; 0xbc <__vector_14+0x66>
	{
		blink++;
  8a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <blink.2534>
  8e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <blink.2534+0x1>
  92:	01 96       	adiw	r24, 0x01	; 1
  94:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <blink.2534+0x1>
  98:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <blink.2534>
		
		/* Blink OFF time */
		if (blink <= 100)
  9c:	85 36       	cpi	r24, 0x65	; 101
  9e:	91 05       	cpc	r25, r1
  a0:	30 f4       	brcc	.+12     	; 0xae <__vector_14+0x58>
		{
			/* Blank hour, plus is preserved */
			PORTD |= _BV(PD_HOUR);
  a2:	5e 9a       	sbi	0x0b, 6	; 11
			/* Turn off all segments */
			MUX_OFF(PD_TEN_MIN);
  a4:	5c 9a       	sbi	0x0b, 4	; 11
			MUX_OFF(PD_UNIT_MIN);
  a6:	5d 9a       	sbi	0x0b, 5	; 11
			MUX_OFF(PD_TEN_SEC);
  a8:	5a 9a       	sbi	0x0b, 2	; 11
			MUX_OFF(PD_UNIT_SEC);
  aa:	5b 9a       	sbi	0x0b, 3	; 11
			goto exit;
  ac:	82 c0       	rjmp	.+260    	; 0x1b2 <__vector_14+0x15c>
		}

		/* Blink ON time */
		if (blink >= 275)
  ae:	83 31       	cpi	r24, 0x13	; 19
  b0:	91 40       	sbci	r25, 0x01	; 1
  b2:	20 f0       	brcs	.+8      	; 0xbc <__vector_14+0x66>
			blink = 0;
  b4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <blink.2534+0x1>
  b8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <blink.2534>
	}
	
	/*** Set digit/segment value for current multiplex state ***/
	
    switch(state)
  bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c0:	81 30       	cpi	r24, 0x01	; 1
  c2:	e1 f0       	breq	.+56     	; 0xfc <__vector_14+0xa6>
  c4:	18 f0       	brcs	.+6      	; 0xcc <__vector_14+0x76>
  c6:	82 30       	cpi	r24, 0x02	; 2
  c8:	c9 f1       	breq	.+114    	; 0x13c <__vector_14+0xe6>
  ca:	50 c0       	rjmp	.+160    	; 0x16c <__vector_14+0x116>
    {
        /*** TENS OF SECONDS ******************/
        case 0:
            MUX_OFF(PD_TEN_MIN);            
  cc:	5c 9a       	sbi	0x0b, 4	; 11
            /* set tens of sec segment state */
            bcd = g_segdata.secs % 10;
  ce:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <g_segdata+0x3>
  d2:	8d ec       	ldi	r24, 0xCD	; 205
  d4:	28 9f       	mul	r18, r24
  d6:	81 2d       	mov	r24, r1
  d8:	11 24       	eor	r1, r1
  da:	86 95       	lsr	r24
  dc:	86 95       	lsr	r24
  de:	86 95       	lsr	r24
  e0:	88 0f       	add	r24, r24
  e2:	98 2f       	mov	r25, r24
  e4:	99 0f       	add	r25, r25
  e6:	99 0f       	add	r25, r25
  e8:	89 0f       	add	r24, r25
  ea:	28 1b       	sub	r18, r24
			PORTC = BCD_MASK(bcd);
  ec:	28 b9       	out	0x08, r18	; 8
            MUX_ON(PD_UNIT_SEC);
  ee:	5b 98       	cbi	0x0b, 3	; 11
            ++state;
  f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f4:	8f 5f       	subi	r24, 0xFF	; 255
  f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
            break;
  fa:	54 c0       	rjmp	.+168    	; 0x1a4 <__vector_14+0x14e>
            
        /*** SECONDS UNIT *********************/
        case 1:
            MUX_OFF(PD_UNIT_SEC);
  fc:	5b 9a       	sbi	0x0b, 3	; 11
            /* set unit sec segment state */            
            bcd = (g_segdata.secs - (g_segdata.secs % 10)) / 10;
  fe:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <g_segdata+0x3>
 102:	42 2f       	mov	r20, r18
 104:	50 e0       	ldi	r21, 0x00	; 0
 106:	9d ec       	ldi	r25, 0xCD	; 205
 108:	29 9f       	mul	r18, r25
 10a:	91 2d       	mov	r25, r1
 10c:	11 24       	eor	r1, r1
 10e:	96 95       	lsr	r25
 110:	96 95       	lsr	r25
 112:	96 95       	lsr	r25
 114:	99 0f       	add	r25, r25
 116:	89 2f       	mov	r24, r25
 118:	88 0f       	add	r24, r24
 11a:	88 0f       	add	r24, r24
 11c:	98 0f       	add	r25, r24
 11e:	29 1b       	sub	r18, r25
 120:	ca 01       	movw	r24, r20
 122:	82 1b       	sub	r24, r18
 124:	91 09       	sbc	r25, r1
 126:	6a e0       	ldi	r22, 0x0A	; 10
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	e5 d1       	rcall	.+970    	; 0x4f6 <__divmodhi4>
			PORTC = BCD_MASK(bcd);
 12c:	68 b9       	out	0x08, r22	; 8
            MUX_ON(PD_TEN_SEC);
 12e:	5a 98       	cbi	0x0b, 2	; 11
            ++state;
 130:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 134:	8f 5f       	subi	r24, 0xFF	; 255
 136:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
            break;
 13a:	34 c0       	rjmp	.+104    	; 0x1a4 <__vector_14+0x14e>
            
        /*** TENS OF MINUTES ******************/
        case 2:
            MUX_OFF(PD_TEN_SEC);
 13c:	5a 9a       	sbi	0x0b, 2	; 11
            /* set tens of min segment state */
            bcd = g_segdata.mins % 10;
 13e:	20 91 65 01 	lds	r18, 0x0165	; 0x800165 <g_segdata+0x2>
 142:	8d ec       	ldi	r24, 0xCD	; 205
 144:	28 9f       	mul	r18, r24
 146:	81 2d       	mov	r24, r1
 148:	11 24       	eor	r1, r1
 14a:	86 95       	lsr	r24
 14c:	86 95       	lsr	r24
 14e:	86 95       	lsr	r24
 150:	88 0f       	add	r24, r24
 152:	98 2f       	mov	r25, r24
 154:	99 0f       	add	r25, r25
 156:	99 0f       	add	r25, r25
 158:	89 0f       	add	r24, r25
 15a:	28 1b       	sub	r18, r24
			PORTC = BCD_MASK(bcd);
 15c:	28 b9       	out	0x08, r18	; 8
            MUX_ON(PD_UNIT_MIN);
 15e:	5d 98       	cbi	0x0b, 5	; 11
            ++state;
 160:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 164:	8f 5f       	subi	r24, 0xFF	; 255
 166:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
            break;
 16a:	1c c0       	rjmp	.+56     	; 0x1a4 <__vector_14+0x14e>
            
        /*** MINUTES UNIT *********************/
        default:
            MUX_OFF(PD_UNIT_MIN);
 16c:	5d 9a       	sbi	0x0b, 5	; 11
            /* set unit min segment state */
            bcd = (g_segdata.mins - (g_segdata.mins % 10)) / 10;
 16e:	20 91 65 01 	lds	r18, 0x0165	; 0x800165 <g_segdata+0x2>
 172:	42 2f       	mov	r20, r18
 174:	50 e0       	ldi	r21, 0x00	; 0
 176:	9d ec       	ldi	r25, 0xCD	; 205
 178:	29 9f       	mul	r18, r25
 17a:	91 2d       	mov	r25, r1
 17c:	11 24       	eor	r1, r1
 17e:	96 95       	lsr	r25
 180:	96 95       	lsr	r25
 182:	96 95       	lsr	r25
 184:	99 0f       	add	r25, r25
 186:	89 2f       	mov	r24, r25
 188:	88 0f       	add	r24, r24
 18a:	88 0f       	add	r24, r24
 18c:	98 0f       	add	r25, r24
 18e:	29 1b       	sub	r18, r25
 190:	ca 01       	movw	r24, r20
 192:	82 1b       	sub	r24, r18
 194:	91 09       	sbc	r25, r1
 196:	6a e0       	ldi	r22, 0x0A	; 10
 198:	70 e0       	ldi	r23, 0x00	; 0
 19a:	ad d1       	rcall	.+858    	; 0x4f6 <__divmodhi4>
			PORTC = BCD_MASK(bcd);
 19c:	68 b9       	out	0x08, r22	; 8
            MUX_ON(PD_TEN_MIN);
 19e:	5c 98       	cbi	0x0b, 4	; 11
            state = 0;
 1a0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
     * so it's refreshed at the same rate as the other 7-segment
     * digits. We do this so it appears visually the same as the 
     * other segments (as opposed to just on or off).
     */
    
	if (g_segdata.hour)
 1a4:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <g_segdata+0x1>
 1a8:	88 23       	and	r24, r24
 1aa:	11 f0       	breq	.+4      	; 0x1b0 <__vector_14+0x15a>
        PORTD &= ~(_BV(PD_HOUR));
 1ac:	5e 98       	cbi	0x0b, 6	; 11
 1ae:	01 c0       	rjmp	.+2      	; 0x1b2 <__vector_14+0x15c>
    else
        PORTD |= _BV(PD_HOUR);
 1b0:	5e 9a       	sbi	0x0b, 6	; 11
     * sign segment flag.
     */

exit:

	if (g_segdata.flags & F_PLUS)
 1b2:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <g_segdata>
 1b6:	80 ff       	sbrs	r24, 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <__vector_14+0x168>
        PORTD &= ~(_BV(PD_PLUS));
 1ba:	5f 98       	cbi	0x0b, 7	; 11
 1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <__vector_14+0x16a>
    else
        PORTD |= _BV(PD_PLUS);
 1be:	5f 9a       	sbi	0x0b, 7	; 11
}
 1c0:	bf 91       	pop	r27
 1c2:	af 91       	pop	r26
 1c4:	9f 91       	pop	r25
 1c6:	8f 91       	pop	r24
 1c8:	7f 91       	pop	r23
 1ca:	6f 91       	pop	r22
 1cc:	5f 91       	pop	r21
 1ce:	4f 91       	pop	r20
 1d0:	2f 91       	pop	r18
 1d2:	0f 90       	pop	r0
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	0f 90       	pop	r0
 1d8:	1f 90       	pop	r1
 1da:	18 95       	reti

000001dc <timer_init>:
     * (CS00|CS02)  - Prescale divide by 1024
     * (WGM01)      - Mode 2, clear timer counter (CTC) on OCR0A match
     */

    /* Set initial timer count value */
    OCR0A  = (uint8_t)(((F_CPU / 1024L) / MUX_RATE_HZ));
 1dc:	8f e0       	ldi	r24, 0x0F	; 15
 1de:	87 bd       	out	0x27, r24	; 39

    /* Divide clock(16mhz) by 1024 */
    TCCR0B = _BV(CS02) | _BV(CS00);
 1e0:	85 e0       	ldi	r24, 0x05	; 5
 1e2:	85 bd       	out	0x25, r24	; 37

    /* Normal CTC mode */
    TCCR0A = _BV(WGM01);
 1e4:	82 e0       	ldi	r24, 0x02	; 2
 1e6:	84 bd       	out	0x24, r24	; 36

    /* Enable timer 0A interrupts */
    TIMSK0 |= _BV(OCIE0A);
 1e8:	ee e6       	ldi	r30, 0x6E	; 110
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	82 60       	ori	r24, 0x02	; 2
 1f0:	80 83       	st	Z, r24
 1f2:	08 95       	ret

000001f4 <io_init>:
     * PC_7SEG_C    PC2  (out) gpio out to 7SEG_C
     * PC_7SEG_B    PC3  (out) gpio out to 7SEG_B
     */
    
    /* PC0-PC3 all pins low, no pullups */
    PORTC = 0x0;
 1f4:	18 b8       	out	0x08, r1	; 8
    /* Set the output pins, all others are inputs */
    DDRC  = _BV(PC_7SEG_A) | _BV(PC_7SEG_B) | _BV(PC_7SEG_C) | _BV(PC_7SEG_D);
 1f6:	8f e0       	ldi	r24, 0x0F	; 15
 1f8:	87 b9       	out	0x07, r24	; 7
	_NOP();
 1fa:	00 00       	nop
     * PD_HOUR      PD6   (out) drive 7SEG_HOUR
     * PD_PLUS      PD7   (out) drive 7SEG_PLUS
     */

    /* all pins low, no pullups */
    PORTD = 0x00;
 1fc:	1b b8       	out	0x0b, r1	; 11
    /* Set the output pins, all others are inputs */
    DDRD  = _BV(PD_TXD) | _BV(PD_TEN_SEC) | _BV(PD_UNIT_SEC) | _BV(PD_TEN_MIN) |
 1fe:	8e ef       	ldi	r24, 0xFE	; 254
 200:	8a b9       	out	0x0a, r24	; 10
            _BV(PD_UNIT_MIN) | _BV(PD_HOUR) | _BV(PD_PLUS);
	_NOP();
 202:	00 00       	nop
	
    /* All high to disable */
    PORTD |= _BV(PD_TEN_SEC) | _BV(PD_UNIT_SEC) | _BV(PD_TEN_MIN) |
 204:	8b b1       	in	r24, 0x0b	; 11
 206:	8c 6f       	ori	r24, 0xFC	; 252
 208:	8b b9       	out	0x0b, r24	; 11
 20a:	08 95       	ret

0000020c <main>:
/****************************************************************************
 * Main Program Entry Point
 ***************************************************************************/

int main(void)
{
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
 210:	cd b7       	in	r28, 0x3d	; 61
 212:	de b7       	in	r29, 0x3e	; 62
 214:	28 97       	sbiw	r28, 0x08	; 8
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	f8 94       	cli
 21a:	de bf       	out	0x3e, r29	; 62
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	cd bf       	out	0x3d, r28	; 61
	uint8_t buf[8];
	uint8_t csum;
	uint8_t check;	
	
    /* Default time to zero */
    g_segdata.flags = F_PLUS;
 220:	e3 e6       	ldi	r30, 0x63	; 99
 222:	f1 e0       	ldi	r31, 0x01	; 1
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	80 83       	st	Z, r24
    g_segdata.hour  = 0;
 228:	11 82       	std	Z+1, r1	; 0x01
    g_segdata.mins  = 0;
 22a:	12 82       	std	Z+2, r1	; 0x02
    g_segdata.secs  = 0;
 22c:	13 82       	std	Z+3, r1	; 0x03
    
    /* Initialize the I/O pins */
    io_init();
 22e:	e2 df       	rcall	.-60     	; 0x1f4 <io_init>
    
    /* Initialize the UART serial port */
    usart_init();
 230:	46 d0       	rcall	.+140    	; 0x2be <usart_init>
    
    /* Initialize and start the timer for the 7-seg mux interrupts */
    timer_init();
 232:	d4 df       	rcall	.-88     	; 0x1dc <timer_init>

    /* Enable global interrupts */
    _SEI();  
 234:	78 94       	sei
 236:	7e 01       	movw	r14, r28
 238:	25 e0       	ldi	r18, 0x05	; 5
 23a:	e2 0e       	add	r14, r18
 23c:	f1 1c       	adc	r15, r1
		
		if (check == csum)
		{
			//_CLI();
			/* Valid packet received, update display data */
			g_segdata.secs  = buf[0] & 0x3F;
 23e:	0f 2e       	mov	r0, r31
 240:	f3 e6       	ldi	r31, 0x63	; 99
 242:	cf 2e       	mov	r12, r31
 244:	f1 e0       	ldi	r31, 0x01	; 1
 246:	df 2e       	mov	r13, r31
 248:	f0 2d       	mov	r31, r0
		 */

		/* Read start of frame preamble 0x89 */

		do  {
			if ((c = usart_tgetc(100)) == -1)
 24a:	84 e6       	ldi	r24, 0x64	; 100
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	86 d0       	rcall	.+268    	; 0x35c <usart_tgetc>
				goto TimeOut;

		} while(c != 0x89);
 250:	89 38       	cpi	r24, 0x89	; 137
 252:	91 05       	cpc	r25, r1
 254:	d1 f7       	brne	.-12     	; 0x24a <main+0x3e>

		/* Read start of frame preamble 0xFC */
		
		do  {
			if ((c = usart_tgetc(100)) == -1)
 256:	84 e6       	ldi	r24, 0x64	; 100
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	80 d0       	rcall	.+256    	; 0x35c <usart_tgetc>
 25c:	8f 3f       	cpi	r24, 0xFF	; 255
 25e:	ef ef       	ldi	r30, 0xFF	; 255
 260:	9e 07       	cpc	r25, r30
 262:	99 f3       	breq	.-26     	; 0x24a <main+0x3e>
				goto TimeOut;
		} while(c != 0xFC);
 264:	8c 3f       	cpi	r24, 0xFC	; 252
 266:	91 05       	cpc	r25, r1
 268:	b1 f7       	brne	.-20     	; 0x256 <main+0x4a>
 26a:	8e 01       	movw	r16, r28
 26c:	0f 5f       	subi	r16, 0xFF	; 255
 26e:	1f 4f       	sbci	r17, 0xFF	; 255
 270:	b1 2c       	mov	r11, r1
		
		csum = 0;
		
		for (i=0; i < 4; i++)
		{
			buf[i] = 0;
 272:	f8 01       	movw	r30, r16
 274:	10 82       	st	Z, r1
			
			if ((c = usart_tgetc(100)) == -1)
 276:	84 e6       	ldi	r24, 0x64	; 100
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	70 d0       	rcall	.+224    	; 0x35c <usart_tgetc>
 27c:	8f 3f       	cpi	r24, 0xFF	; 255
 27e:	ff ef       	ldi	r31, 0xFF	; 255
 280:	9f 07       	cpc	r25, r31
 282:	19 f3       	breq	.-58     	; 0x24a <main+0x3e>
				goto TimeOut;
			
			/* Buffer the rx packet data */
			buf[i]= (uint8_t)c;
 284:	f8 01       	movw	r30, r16
 286:	81 93       	st	Z+, r24
 288:	8f 01       	movw	r16, r30
			
			/* Update the checksum */
			csum += ((uint8_t)c & 0xFF);
 28a:	b8 0e       	add	r11, r24

		/* Read sign, hour, mins, secs and calculate checksum */
		
		csum = 0;
		
		for (i=0; i < 4; i++)
 28c:	ee 16       	cp	r14, r30
 28e:	ff 06       	cpc	r15, r31
 290:	81 f7       	brne	.-32     	; 0x272 <main+0x66>
			/* Update the checksum */
			csum += ((uint8_t)c & 0xFF);
		}

		/* Read the checksum MSB */
		if ((c = usart_tgetc(100)) == -1)
 292:	84 e6       	ldi	r24, 0x64	; 100
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	62 d0       	rcall	.+196    	; 0x35c <usart_tgetc>
 298:	8f 3f       	cpi	r24, 0xFF	; 255
 29a:	ff ef       	ldi	r31, 0xFF	; 255
 29c:	9f 07       	cpc	r25, r31
 29e:	a9 f2       	breq	.-86     	; 0x24a <main+0x3e>

		check = (uint8_t)c & 0xFF;

		/* Validate the CRC values match */
		
		if (check == csum)
 2a0:	b8 12       	cpse	r11, r24
 2a2:	d3 cf       	rjmp	.-90     	; 0x24a <main+0x3e>
		{
			//_CLI();
			/* Valid packet received, update display data */
			g_segdata.secs  = buf[0] & 0x3F;
 2a4:	89 81       	ldd	r24, Y+1	; 0x01
 2a6:	8f 73       	andi	r24, 0x3F	; 63
 2a8:	f6 01       	movw	r30, r12
 2aa:	83 83       	std	Z+3, r24	; 0x03
			g_segdata.mins  = buf[1] & 0x3F;
 2ac:	8a 81       	ldd	r24, Y+2	; 0x02
 2ae:	8f 73       	andi	r24, 0x3F	; 63
 2b0:	82 83       	std	Z+2, r24	; 0x02
			g_segdata.hour  = buf[2] & 0x01;
 2b2:	8b 81       	ldd	r24, Y+3	; 0x03
 2b4:	81 70       	andi	r24, 0x01	; 1
 2b6:	81 83       	std	Z+1, r24	; 0x01
			g_segdata.flags = buf[3];
 2b8:	8c 81       	ldd	r24, Y+4	; 0x04
 2ba:	80 83       	st	Z, r24
 2bc:	c6 cf       	rjmp	.-116    	; 0x24a <main+0x3e>

000002be <usart_init>:
            break;
    }

    return cnt;

}
 2be:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <async+0x41>
 2c2:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <async+0x40>
 2c6:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <async+0x43>
 2ca:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <async+0x42>
 2ce:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <async+0x45>
 2d2:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <async+0x44>
 2d6:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <async+0x57>
 2da:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <async+0x56>
 2de:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <async+0x59>
 2e2:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <async+0x58>
 2e6:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <async+0x5b>
 2ea:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <async+0x5a>
 2ee:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__EEPROM_REGION_LENGTH__+0x7f00c5>
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
 2f8:	88 e9       	ldi	r24, 0x98	; 152
 2fa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__EEPROM_REGION_LENGTH__+0x7f00c1>
 2fe:	86 e0       	ldi	r24, 0x06	; 6
 300:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
 304:	08 95       	ret

00000306 <usart_getc>:
 306:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <async+0x40>
 30a:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <async+0x41>
 30e:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <async+0x42>
 312:	30 91 46 01 	lds	r19, 0x0146	; 0x800146 <async+0x43>
 316:	82 17       	cp	r24, r18
 318:	93 07       	cpc	r25, r19
 31a:	e9 f0       	breq	.+58     	; 0x356 <usart_getc+0x50>
 31c:	ac 01       	movw	r20, r24
 31e:	4f 5f       	subi	r20, 0xFF	; 255
 320:	5f 4f       	sbci	r21, 0xFF	; 255
 322:	fc 01       	movw	r30, r24
 324:	ed 5f       	subi	r30, 0xFD	; 253
 326:	fe 4f       	sbci	r31, 0xFE	; 254
 328:	80 81       	ld	r24, Z
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	e7 e4       	ldi	r30, 0x47	; 71
 32e:	f1 e0       	ldi	r31, 0x01	; 1
 330:	20 81       	ld	r18, Z
 332:	31 81       	ldd	r19, Z+1	; 0x01
 334:	21 50       	subi	r18, 0x01	; 1
 336:	31 09       	sbc	r19, r1
 338:	31 83       	std	Z+1, r19	; 0x01
 33a:	20 83       	st	Z, r18
 33c:	40 34       	cpi	r20, 0x40	; 64
 33e:	51 05       	cpc	r21, r1
 340:	18 f4       	brcc	.+6      	; 0x348 <usart_getc+0x42>
 342:	34 2f       	mov	r19, r20
 344:	25 2f       	mov	r18, r21
 346:	02 c0       	rjmp	.+4      	; 0x34c <usart_getc+0x46>
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	20 e0       	ldi	r18, 0x00	; 0
 34c:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <async+0x40>
 350:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <async+0x41>
 354:	08 95       	ret
 356:	8f ef       	ldi	r24, 0xFF	; 255
 358:	9f ef       	ldi	r25, 0xFF	; 255
 35a:	08 95       	ret

0000035c <usart_tgetc>:
 35c:	ef 92       	push	r14
 35e:	ff 92       	push	r15
 360:	0f 93       	push	r16
 362:	1f 93       	push	r17
 364:	cf 93       	push	r28
 366:	df 93       	push	r29
 368:	7c 01       	movw	r14, r24
 36a:	00 97       	sbiw	r24, 0x00	; 0
 36c:	21 f0       	breq	.+8      	; 0x376 <usart_tgetc+0x1a>
 36e:	2c f4       	brge	.+10     	; 0x37a <usart_tgetc+0x1e>
 370:	8f ef       	ldi	r24, 0xFF	; 255
 372:	9f ef       	ldi	r25, 0xFF	; 255
 374:	19 c0       	rjmp	.+50     	; 0x3a8 <usart_tgetc+0x4c>
 376:	c7 df       	rcall	.-114    	; 0x306 <usart_getc>
 378:	17 c0       	rjmp	.+46     	; 0x3a8 <usart_tgetc+0x4c>
 37a:	00 e0       	ldi	r16, 0x00	; 0
 37c:	10 e0       	ldi	r17, 0x00	; 0
 37e:	c0 ed       	ldi	r28, 0xD0	; 208
 380:	d7 e0       	ldi	r29, 0x07	; 7
 382:	c1 df       	rcall	.-126    	; 0x306 <usart_getc>
 384:	8f 3f       	cpi	r24, 0xFF	; 255
 386:	2f ef       	ldi	r18, 0xFF	; 255
 388:	92 07       	cpc	r25, r18
 38a:	71 f4       	brne	.+28     	; 0x3a8 <usart_tgetc+0x4c>
 38c:	8a e0       	ldi	r24, 0x0A	; 10
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	fe 01       	movw	r30, r28
 392:	31 97       	sbiw	r30, 0x01	; 1
 394:	f1 f7       	brne	.-4      	; 0x392 <usart_tgetc+0x36>
 396:	01 97       	sbiw	r24, 0x01	; 1
 398:	d9 f7       	brne	.-10     	; 0x390 <usart_tgetc+0x34>
 39a:	0f 5f       	subi	r16, 0xFF	; 255
 39c:	1f 4f       	sbci	r17, 0xFF	; 255
 39e:	e0 16       	cp	r14, r16
 3a0:	f1 06       	cpc	r15, r17
 3a2:	79 f7       	brne	.-34     	; 0x382 <usart_tgetc+0x26>
 3a4:	8f ef       	ldi	r24, 0xFF	; 255
 3a6:	9f ef       	ldi	r25, 0xFF	; 255
 3a8:	df 91       	pop	r29
 3aa:	cf 91       	pop	r28
 3ac:	1f 91       	pop	r17
 3ae:	0f 91       	pop	r16
 3b0:	ff 90       	pop	r15
 3b2:	ef 90       	pop	r14
 3b4:	08 95       	ret

000003b6 <__vector_20>:
/****************************************************************************
 * USART TX/RX INTERRUPT HANDLERS
 ***************************************************************************/

ISR(USART_TX_vect)
{
 3b6:	1f 92       	push	r1
 3b8:	0f 92       	push	r0
 3ba:	0f b6       	in	r0, 0x3f	; 63
 3bc:	0f 92       	push	r0
 3be:	11 24       	eor	r1, r1
}
 3c0:	0f 90       	pop	r0
 3c2:	0f be       	out	0x3f, r0	; 63
 3c4:	0f 90       	pop	r0
 3c6:	1f 90       	pop	r1
 3c8:	18 95       	reti

000003ca <__vector_19>:
/*
 * TRANSMIT INTERRUPT HANDLER
 */

ISR(USART_UDRE_vect)
{
 3ca:	1f 92       	push	r1
 3cc:	0f 92       	push	r0
 3ce:	0f b6       	in	r0, 0x3f	; 63
 3d0:	0f 92       	push	r0
 3d2:	11 24       	eor	r1, r1
 3d4:	2f 93       	push	r18
 3d6:	3f 93       	push	r19
 3d8:	4f 93       	push	r20
 3da:	8f 93       	push	r24
 3dc:	9f 93       	push	r25
 3de:	ef 93       	push	r30
 3e0:	ff 93       	push	r31
    char    c;
    size_t  n;

    if (async.tx.head == async.tx.tail)             /* get head pointer   */
 3e2:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <async+0x56>
 3e6:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <async+0x57>
 3ea:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <async+0x58>
 3ee:	30 91 5c 01 	lds	r19, 0x015C	; 0x80015c <async+0x59>
 3f2:	82 17       	cp	r24, r18
 3f4:	93 07       	cpc	r25, r19
 3f6:	51 f4       	brne	.+20     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
    {
        UCSR0B &= ~(1<<UDRIE0);                     /* disable UDRE int's */
 3f8:	e1 ec       	ldi	r30, 0xC1	; 193
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	80 81       	ld	r24, Z
 3fe:	8f 7d       	andi	r24, 0xDF	; 223
 400:	80 83       	st	Z, r24
        async.tx.count = 0;                         /* reset buf count    */
 402:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <async+0x5b>
 406:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <async+0x5a>
 40a:	1c c0       	rjmp	.+56     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
    }
    else
    {
        n = async.tx.head;

        c = (uint8_t)async.tx.buf[n++];             /* get char in buff   */
 40c:	9c 01       	movw	r18, r24
 40e:	2f 5f       	subi	r18, 0xFF	; 255
 410:	3f 4f       	sbci	r19, 0xFF	; 255
 412:	fc 01       	movw	r30, r24
 414:	e7 5b       	subi	r30, 0xB7	; 183
 416:	fe 4f       	sbci	r31, 0xFE	; 254
 418:	40 81       	ld	r20, Z

        --async.tx.count;                           /* dec buffer count   */
 41a:	ed e5       	ldi	r30, 0x5D	; 93
 41c:	f1 e0       	ldi	r31, 0x01	; 1
 41e:	80 81       	ld	r24, Z
 420:	91 81       	ldd	r25, Z+1	; 0x01
 422:	01 97       	sbiw	r24, 0x01	; 1
 424:	91 83       	std	Z+1, r25	; 0x01
 426:	80 83       	st	Z, r24

        async.tx.head = (n >= USART_TX_BUFSIZE) ? 0 : n;
 428:	20 31       	cpi	r18, 0x10	; 16
 42a:	31 05       	cpc	r19, r1
 42c:	18 f4       	brcc	.+6      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 42e:	92 2f       	mov	r25, r18
 430:	83 2f       	mov	r24, r19
 432:	02 c0       	rjmp	.+4      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <async+0x56>
 43c:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <async+0x57>
        
        UDR0 = c;                                   /* tx the character   */
 440:	40 93 c6 00 	sts	0x00C6, r20	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
    }
}
 444:	ff 91       	pop	r31
 446:	ef 91       	pop	r30
 448:	9f 91       	pop	r25
 44a:	8f 91       	pop	r24
 44c:	4f 91       	pop	r20
 44e:	3f 91       	pop	r19
 450:	2f 91       	pop	r18
 452:	0f 90       	pop	r0
 454:	0f be       	out	0x3f, r0	; 63
 456:	0f 90       	pop	r0
 458:	1f 90       	pop	r1
 45a:	18 95       	reti

0000045c <__vector_18>:
/*
 * RECEIVE INTERRUPT HANDLER
 */

ISR(USART_RX_vect)
{
 45c:	1f 92       	push	r1
 45e:	0f 92       	push	r0
 460:	0f b6       	in	r0, 0x3f	; 63
 462:	0f 92       	push	r0
 464:	11 24       	eor	r1, r1
 466:	2f 93       	push	r18
 468:	3f 93       	push	r19
 46a:	4f 93       	push	r20
 46c:	8f 93       	push	r24
 46e:	9f 93       	push	r25
 470:	ef 93       	push	r30
 472:	ff 93       	push	r31
    uint8_t stat;
    size_t  n;

    /* read line status and character data */

    stat = UCSR0A;
 474:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
    rxd  = UDR0;
 478:	40 91 c6 00 	lds	r20, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>

    if ((stat & (L_FRAMING_ERROR | L_PARITY_ERROR | L_DATA_OVERRUN)) != 0)
 47c:	98 2f       	mov	r25, r24
 47e:	9c 71       	andi	r25, 0x1C	; 28
 480:	31 f0       	breq	.+12     	; 0x48e <__vector_18+0x32>
    {
        async.stat.line |= stat;                    /* line status reg    */
 482:	e1 e6       	ldi	r30, 0x61	; 97
 484:	f1 e0       	ldi	r31, 0x01	; 1
 486:	90 81       	ld	r25, Z
 488:	89 2b       	or	r24, r25
 48a:	80 83       	st	Z, r24
 48c:	28 c0       	rjmp	.+80     	; 0x4de <__vector_18+0x82>
    }
    else
    {
        n = async.rx.tail;                          /* get tail index     */
 48e:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <async+0x42>
 492:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <async+0x43>

        async.rx.buf[n++] = rxd;                    /* put char in buff   */
 496:	9c 01       	movw	r18, r24
 498:	2f 5f       	subi	r18, 0xFF	; 255
 49a:	3f 4f       	sbci	r19, 0xFF	; 255
 49c:	fc 01       	movw	r30, r24
 49e:	ed 5f       	subi	r30, 0xFD	; 253
 4a0:	fe 4f       	sbci	r31, 0xFE	; 254
 4a2:	40 83       	st	Z, r20

        if (n >= USART_RX_BUFSIZE)                  /* tail wrap around?  */
 4a4:	20 34       	cpi	r18, 0x40	; 64
 4a6:	31 05       	cpc	r19, r1
 4a8:	10 f0       	brcs	.+4      	; 0x4ae <__vector_18+0x52>
            n = 0;
 4aa:	20 e0       	ldi	r18, 0x00	; 0
 4ac:	30 e0       	ldi	r19, 0x00	; 0

        if (n == async.rx.head)                     /* buffer overflow?   */
 4ae:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <async+0x40>
 4b2:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <async+0x41>
 4b6:	28 17       	cp	r18, r24
 4b8:	39 07       	cpc	r19, r25
 4ba:	31 f4       	brne	.+12     	; 0x4c8 <__vector_18+0x6c>
        {
            async.stat.flags |= A_RX_OVERFLOW;      /* yes, set flag      */
 4bc:	e0 e6       	ldi	r30, 0x60	; 96
 4be:	f1 e0       	ldi	r31, 0x01	; 1
 4c0:	80 81       	ld	r24, Z
 4c2:	82 60       	ori	r24, 0x02	; 2
 4c4:	80 83       	st	Z, r24
 4c6:	0b c0       	rjmp	.+22     	; 0x4de <__vector_18+0x82>
        }
        else
        {
            async.rx.tail = n;                      /* new buffer tail    */
 4c8:	30 93 46 01 	sts	0x0146, r19	; 0x800146 <async+0x43>
 4cc:	20 93 45 01 	sts	0x0145, r18	; 0x800145 <async+0x42>

            ++(async.rx.count);                     /* inc buffer count   */
 4d0:	e7 e4       	ldi	r30, 0x47	; 71
 4d2:	f1 e0       	ldi	r31, 0x01	; 1
 4d4:	80 81       	ld	r24, Z
 4d6:	91 81       	ldd	r25, Z+1	; 0x01
 4d8:	01 96       	adiw	r24, 0x01	; 1
 4da:	91 83       	std	Z+1, r25	; 0x01
 4dc:	80 83       	st	Z, r24
        }
    }
}
 4de:	ff 91       	pop	r31
 4e0:	ef 91       	pop	r30
 4e2:	9f 91       	pop	r25
 4e4:	8f 91       	pop	r24
 4e6:	4f 91       	pop	r20
 4e8:	3f 91       	pop	r19
 4ea:	2f 91       	pop	r18
 4ec:	0f 90       	pop	r0
 4ee:	0f be       	out	0x3f, r0	; 63
 4f0:	0f 90       	pop	r0
 4f2:	1f 90       	pop	r1
 4f4:	18 95       	reti

000004f6 <__divmodhi4>:
 4f6:	97 fb       	bst	r25, 7
 4f8:	07 2e       	mov	r0, r23
 4fa:	16 f4       	brtc	.+4      	; 0x500 <__stack+0x1>
 4fc:	00 94       	com	r0
 4fe:	06 d0       	rcall	.+12     	; 0x50c <__divmodhi4_neg1>
 500:	77 fd       	sbrc	r23, 7
 502:	08 d0       	rcall	.+16     	; 0x514 <__divmodhi4_neg2>
 504:	0b d0       	rcall	.+22     	; 0x51c <__udivmodhi4>
 506:	07 fc       	sbrc	r0, 7
 508:	05 d0       	rcall	.+10     	; 0x514 <__divmodhi4_neg2>
 50a:	3e f4       	brtc	.+14     	; 0x51a <__divmodhi4_exit>

0000050c <__divmodhi4_neg1>:
 50c:	90 95       	com	r25
 50e:	81 95       	neg	r24
 510:	9f 4f       	sbci	r25, 0xFF	; 255
 512:	08 95       	ret

00000514 <__divmodhi4_neg2>:
 514:	70 95       	com	r23
 516:	61 95       	neg	r22
 518:	7f 4f       	sbci	r23, 0xFF	; 255

0000051a <__divmodhi4_exit>:
 51a:	08 95       	ret

0000051c <__udivmodhi4>:
 51c:	aa 1b       	sub	r26, r26
 51e:	bb 1b       	sub	r27, r27
 520:	51 e1       	ldi	r21, 0x11	; 17
 522:	07 c0       	rjmp	.+14     	; 0x532 <__udivmodhi4_ep>

00000524 <__udivmodhi4_loop>:
 524:	aa 1f       	adc	r26, r26
 526:	bb 1f       	adc	r27, r27
 528:	a6 17       	cp	r26, r22
 52a:	b7 07       	cpc	r27, r23
 52c:	10 f0       	brcs	.+4      	; 0x532 <__udivmodhi4_ep>
 52e:	a6 1b       	sub	r26, r22
 530:	b7 0b       	sbc	r27, r23

00000532 <__udivmodhi4_ep>:
 532:	88 1f       	adc	r24, r24
 534:	99 1f       	adc	r25, r25
 536:	5a 95       	dec	r21
 538:	a9 f7       	brne	.-22     	; 0x524 <__udivmodhi4_loop>
 53a:	80 95       	com	r24
 53c:	90 95       	com	r25
 53e:	bc 01       	movw	r22, r24
 540:	cd 01       	movw	r24, r26
 542:	08 95       	ret

00000544 <_exit>:
 544:	f8 94       	cli

00000546 <__stop_program>:
 546:	ff cf       	rjmp	.-2      	; 0x546 <__stop_program>
